using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace csvClient
{
    class Client_Program
    {
        static string filePath = ""; // 파일경로 전역변수 처리
        static bool stopReceiving = false; // 데이터 수신을 종료시키는 플래그

        static void Main(string[] args)
        {
            using(UdpClient Uclient = new UdpClient()) // UDP 클라이언트 설정
            {
                // 서버주소, 포트 설정
                string serverAddress = "127.0.0.1";
                int udpPort = 5000;
                int tcpPort = 7000;

                // 현재 디렉터리 안에 데이터를 저장할 폴더 경로 설정
                string currentPath = Directory.GetCurrentDirectory();
                currentPath += "\\Data_Save";

                // 폴더가 존재하지 않을 시 생성
                if(!Directory.Exists(currentPath))
                {
                    Directory.CreateDirectory(currentPath);
                }

                using(TcpClient Tclient = new TcpClient(serverAddress, tcpPort)) // TCP 클라이언트로 서버에 연결
                {
                    NetworkStream stream = Tclient.GetStream();
                    byte[] data = new byte[2048];
                    
                    // 서버로부터 실시간 데이터를 수신하는 작업 비동기 실행
                    Task receiveTask = Task.Run( () => 
                    {
                        while(!stopReceiving)
                        {
                            try
                            {
                                // TCP 스트림에서 데이터 수신
                                if(stream.DataAvailable)
                                {
                                    int nbytes = stream.Read(data, 0, data.Length);

                                    if(nbytes > 0)
                                    {
                                        string output = Encoding.UTF8.GetString(data, 0, nbytes); // 수신한 데이터 UTF-8로 변환후 출력

                                        // 파일 경로가 설정되어 있다면 CSV파일에 저장
                                        if(!string.IsNullOrEmpty(filePath))
                                        {
                                            Save(filePath, output);
                                        }
                                    }
                                }
                            }
                            catch(Exception e)
                            {
                                if(!stopReceiving)
                                {
                                    Console.WriteLine($"데이터 수신 중 오류 발생: {e.Message}");
                                }
                                break;
                            }
                        }
                    });

                    // 사용자로부터 명령 입력 대기 루프
                    while(true)
                    {
                        Console.Write("명령어의 숫자를 입력하세요. (1. 데이터 수집 시작, 2. 데이터 수집 종료): ");
                        string message = Console.ReadLine();

                        byte[] key = Encoding.UTF8.GetBytes(message);
                        Uclient.Send(key, key.Length, serverAddress, udpPort);

                        // 데이터 수집을 시작하는 경우
                        if(message == "1" && string.IsNullOrEmpty(filePath))
                        {
                            Console.WriteLine("데이터 수집이 시작됩니다.");

                            // 파일 이름 = 현재 시간으로 설정 후 CSV 파일을 생성
                            string fileName = DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".csv";
                            filePath = Path.Combine(currentPath, fileName);

                            // CSV 파일에 헤더 작성
                            using(StreamWriter csvWriter = new StreamWriter(filePath, false, Encoding.UTF8))
                            {
                                csvWriter.WriteLine("수집 시간, CPU 사용률(%), RAM 사용량(MB)");
                            }
                        }

                        // 데이터 수집을 종료하는 경우
                        if(message == "2")
                        {
                            Console.WriteLine("데이터 수집이 종료됩니다.");

                            stopReceiving = true; // 데이터 수집을 종료를 알리는 플래그 설정
                            receiveTask.Wait(); // 수신 작업이 완료될 때까지 대기
                            Tclient.Close(); // TCP클라이언트 연결 종료

                            Console.WriteLine("클라이언트 종료 중...");
                            Thread.Sleep(3000);
                            break;
                        }
                    }
                }
                Uclient.Close(); // UDP 클라이언트 종료
            }
        }

        // 서버에서 받은 데이터 CSV 파일에 저장하는 메서드
        static void Save(string filePath, string output)
        {
            string[] parts = output.Split('|'); // 서버에서 받은 데이터를 '|' 기준으로 분리

            // 각 데이터 항목을 분리하여 CSV 형태에 맞게 저장
            string timeStamp = parts[0].Split('=')[1].Trim();
            string cpuUsage = parts[1].Split('=')[1].Trim();
            string ramUsage = parts[2].Split('=')[1].Trim();

            // CSV 파일에 수집 시간, CPU 사용률, RAM 사용량을 기록
            using(StreamWriter csvWriter = new StreamWriter(filePath, true, Encoding.UTF8))
            {
                csvWriter.WriteLine($"{timeStamp}, {cpuUsage}, {ramUsage}");
            }
        }
    }
}
