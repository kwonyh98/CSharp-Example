using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Management;

namespace csvServer
{
    class Server_Program
    {
        private static volatile bool collectingData = false; // 데이터 수집 상태 추적 변수
        private static TcpClient tc;
        static void Main(string[] args)
        {
            UdpClient Userver = new UdpClient(5000); //UDP 서버 설정(포트 5000번)
            TcpListener Tserver = new TcpListener(IPAddress.Any, 7000); //TCP 서버 설정(포트 7000번)

            Tserver.Start(); // TCP 서버 시작
            Console.WriteLine("서버가 시작되었습니다.");

            tc = Tserver.AcceptTcpClient(); // TCP 클라이언트 연결 대기

            while (true) // 계속해서 클라이언트 명령 처리
            {
                // 클라이언트로 부터 UDP 메시지 수신
                IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
                byte[] receivedBytes = Userver.Receive(ref remoteEndPoint);
                string clientMessage = Encoding.UTF8.GetString(receivedBytes).Trim();

                if (clientMessage == "1") // 데이터 수집 시작 명령
                {
                    Console.WriteLine("데이터 수집을 시작합니다.");
                    StartDataCollection();
                }
                else if (clientMessage == "2") // 데이터 수집 종료 명령
                {
                    Console.WriteLine("데이터 수집을 종료합니다.");
                    StopDataCollection();
                    break;
                }
                else // 잘못된 명령
                {
                    Console.WriteLine("해당하는 명령어가 없습니다.");
                }
            }

            Console.WriteLine("서버 종료 중...");
            Thread.Sleep(3000);
            // TCP 클라이언트 연결 종료 처리
            if(tc != null)
            {
                tc.Close(); 
            }
            Tserver.Stop(); // TCP 서버 종료
        }

        // 데이터 수집 시작 메서드
        private static void StartDataCollection()
        {
            if (!collectingData)
            {
                // 이미 데이터 수집 시작된 경우 중복 방지
                collectingData = true;
            
                // 비동기적 데이터 수집하는 작업 실행
                Task.Run(() =>
                {
                    // CPU 사용률을 모니터링하는 PerformanceCounter 설정
                    PerformanceCounter cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");

                    // 초기값을 가져오기 위한 대기
                    cpuCounter.NextValue();
                    Thread.Sleep(1000); // 1초 대기

                    //데이터 수집 루프
                    while (collectingData)
                    {
                        GetSystemUsage(cpuCounter); // 시스템 사용량을 가져옴
                        Thread.Sleep(1000); // 1초마다 데이터 수집
                    }
                });
            }
        }

        // 데이터 수집 종료 매서드
        private static void StopDataCollection()
        {
            collectingData = false;
        }

        // CPU 사용률, RAM 사용량 데이터를 수집하는 메서드
        private static void GetSystemUsage(PerformanceCounter cpuCounter)
        {
            float cpuUsage = cpuCounter.NextValue();

            ulong totalRam = GetTotalRam(); // 전체 RAM
            ulong availableRam = GetAvailableRam(); // 사용 가능한 RAM
            ulong usedRam = totalRam - availableRam; // 사용 중인 RAM = 전체 RAM - 사용 가능한 RAM

            var dataTime = DateTime.Now.ToString("yyyy.MM.dd_HH:mm:ss"); // 현재 시간 포멧 설정

            // 가져온 데이터 콘솔창에 출력
            Console.WriteLine($"시간 = {dataTime} | CPU 사용률 = {cpuUsage:F2}% | RAM 사용량 = {usedRam:F0} MB");

            // 클라이언트에 전송할 메시지 작성
            string msg = $"시간 = {dataTime} | CPU 사용률 = {cpuUsage:F2}% | RAM 사용량 = {usedRam:F0} MB";
        
            // TCP 클라이언트에 연결되어 있는지 확인 후 데이터 전송
            if(tc != null && tc.Connected)
            {
                NetworkStream stream = tc.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(msg);
                stream.Write(data, 0, data.Length);
            }
        }

        public static ulong GetTotalRam() // RAM 전체 사용량 가져오기
        {
            //WMI 쿼리로 운영체제의 전체 RAM 용량을 가져옴
            ObjectQuery winQuery = new ObjectQuery("SELECT TotalVisibleMemorySize FROM Win32_OperatingSystem");
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(winQuery);

            // 쿼리 결과에서 RAM 크기를 반환
            foreach (ManagementObject item in searcher.Get())
            {
                return (ulong)item["TotalVisibleMemorySize"] / 1024; // KB -> MB로 변환
            }
            return 0;
        }

        public static ulong GetAvailableRam() // RAM 사용 가능량 가져오기
        {
            //WMI 쿼리로 운영체제의 사용 가능한 RAM 용량을 가져옴
            ObjectQuery winQuery = new ObjectQuery("SELECT FreePhysicalMemory FROM Win32_OperatingSystem");
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(winQuery);

            // 쿼리 결과에서 RAM 크기를 반환
            foreach (ManagementObject item in searcher.Get())
            {
                return (ulong)item["FreePhysicalMemory"] /1024; // KB -> MB로 변환
            }
            return 0;
        }
    }
}
