using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace TaskResult
{
    class MainApp
    {
        static bool IsPrime(long number)
        {
            if (number < 2)
                return false;
            if (number % 2 == 0 && number != 2)
                return false;
            
            for (long i = 2; i < number; i++)
            {
                if (number % i == 0)
                    return false;
            }
            return true;
        }

        static void Main(string[] args)
        {
            Console.WriteLine("This program calculates all prime numbers between two numbers:");
            Console.WriteLine("Please enter the first number: ");
            
            long from;
            
            while (!long.TryParse(Console.ReadLine(), out from))
            {
                Console.WriteLine("Please enter a valid integer for the first number: ");
            }

            Console.WriteLine("Please enter the second number: ");
            
            long to;
            while (!long.TryParse(Console.ReadLine(), out to))
            {
                Console.WriteLine("Please enter a valid integer for the second number: ");
            }

            Console.WriteLine("Please tell me how many tasks to create: ");
            
            int taskCount;
            while (!int.TryParse(Console.ReadLine(), out taskCount))
            {
                Console.WriteLine("Please enter a valid integer for the task count: ");
            }


            Func<object, List<long>> FindPrimeFunc =
                (objRange) =>
                {
                    long[] range = (long[])objRange;
                    List<long> found = new List<long>();
                    //range[0]: currentFrom
                    //range[1]: currentTo
                    for (long i = range[0]; i < range[1]; i++)
                    {
                        if (IsPrime(i))
                            found.Add(i);
                    }

                    return found;
                };
            
            Task<List<long>>[] tasks = new Task<List<long>>[taskCount];
            
            long currentFrom = from;
            
            long currentTo = to / tasks.Length;

            for (int i = 0; i < tasks.Length; i++)
            {
                
                Console.WriteLine("Task[{0}] : {1} ~ {2}",
                    i, currentFrom, currentTo);
                tasks[i] = new Task<List<long>>(FindPrimeFunc,
                    new long[2] { currentFrom, currentTo });

                currentFrom = currentTo + 1;

                if (i == tasks.Length - 2)
                    currentTo = to;
                else
                    currentTo = currentTo + (to / tasks.Length);
            }

            Console.WriteLine("Started...");

            DateTime startTime = DateTime.Now;

            foreach (Task<List<long>> task in tasks)
                task.Start();

            List<long> total = new List<long>();

            int count = 0;

            foreach (Task<List<long>> task in tasks)
            {
                task.Wait();
                total.AddRange(task.Result.ToArray());
                count++;
                Console.WriteLine("\nPrime numbers found by {0} task: {1}\n", count , string.Join(", ", total));

            }
            DateTime endTime = DateTime.Now;
            
            TimeSpan ellapsed = endTime - startTime;
            
            Console.WriteLine("Prime number count between {0} and {1} : {2}",
                                                        from, to, total.Count);
            Console.WriteLine("Elapsed time : {0}", ellapsed);
        }
    }
}
